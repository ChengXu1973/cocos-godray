#include <common/data/packing>

#define TEXTURE_SIZE 1024.0
#define SHADOW_BIAS 0.02
#define SHADOW_FADE 0.05

float shadowStrength (in mat4 matViewProj, in vec4 worldPos, in sampler2D shadowTexture) {
    vec4 shadow_pos = matViewProj * vec4(worldPos.xyz, 1.0);
    vec3 shadowUV = shadow_pos.xyz / shadow_pos.w * 0.5 + 0.5;
    float closest = unpackRGBAToDepth(texture(shadowTexture, shadowUV.xy));
    float limit = closest + SHADOW_BIAS;
    return clamp((shadowUV.z - limit) / SHADOW_FADE, 0.0, 1.0);
}

float shadowStrengthPCF2 (in mat4 matViewProj, in vec4 worldPos, in sampler2D shadowTexture) {
    vec4 shadow_pos = matViewProj * vec4(worldPos.xyz, 1.0);
    vec3 shadowUV = shadow_pos.xyz / shadow_pos.w * 0.5 + 0.5;
    float strength = 0.0;
    for (int y = -1; y <= 1; y++) {
        for (int x = -1; x <= 1; x++) {
            vec2 offset = vec2(x, y) / TEXTURE_SIZE;
            float closest = unpackRGBAToDepth(texture(shadowTexture, shadowUV.xy + offset));
            if (shadowUV.z <= closest + SHADOW_BIAS) {
                strength += 1.0;
            }
        }
    }
    return strength / 9.0;
}

float shadowStrengthPCF4 (in mat4 matViewProj, in vec4 worldPos, in sampler2D shadowTexture) {
    vec4 shadow_pos = matViewProj * vec4(worldPos.xyz, 1.0);
    vec3 shadowUV = shadow_pos.xyz / shadow_pos.w * 0.5 + 0.5;
    float strength = 0.0;
    for (int y = -2; y <= 2; y++) {
        for (int x = -2; x <= 2; x++) {
            vec2 offset = vec2(x, y) / TEXTURE_SIZE;
            float closest = unpackRGBAToDepth(texture(shadowTexture, shadowUV.xy + offset));
            if (shadowUV.z <= closest + SHADOW_BIAS) {
                strength += 1.0;
            }
        }
    }
    return strength / 25.0;
}