CCEffect %{
  techniques:
  - passes:
    - vert: godray-vs:vert
      frag: godray-fs:frag
      pass: godray
      depthStencilState:
        depthTest: false
        depthWrite: false
      rasterizerState:
        cullMode: none
      properties:
        stepSize:      { value: 0.3, target: godrayParam.x }
        shadowTexture: { value: white }
}%

CCProgram godray-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/input-standard>
  #include <legacy/decode-standard>
  #include <post-process/pipeline>

  out vec2 v_uv;

  vec4 vert () {
    StandardVertInput In;
    CCDecode(In);
    FLIP_VULKAN_NDC(In.position);

    v_uv = a_texCoord;
    CC_HANDLE_RT_SAMPLE_FLIP(v_uv);

    return In.position;
  }
}%

CCProgram godray-fs %{
  precision highp float;

  #include <chunk-shadow>
  #include <common/data/packing>
  #include <builtin/uniforms/cc-global>

  in vec2 v_uv;

  uniform Constant {
    vec4 godrayParam;
    mat4 shadow_matViewProj;
  };

  #pragma rate depthTexture pass
  uniform sampler2D depthTexture;
  uniform sampler2D shadowTexture;

  #define MAX_SETP 64

  vec4 frag () {
    float depth = unpackRGBAToDepth(texture(depthTexture, v_uv));

    vec4 ndcPos = vec4(vec3(v_uv, depth) * 2.0 - 1.0, 1.0);
    ndcPos = cc_matProjInv * ndcPos;
    ndcPos /= ndcPos.w;
    vec4 worldPos = cc_matViewInv * ndcPos;
    vec4 dir = normalize(cc_cameraPos - worldPos);

    float stepSize = godrayParam.x;
    float totalShadow = 0.0;
    int actualStep = int(length(worldPos - cc_cameraPos) / stepSize);

    for (int i = 0; i < MAX_SETP; i++) {
      if (i >= actualStep) {
        break;
      }
      vec4 rayPos = worldPos + dir * float(i) * stepSize;
      totalShadow += shadowStrength(shadow_matViewProj, rayPos, shadowTexture);
    }

    float light = 1.0 - totalShadow / float(MAX_SETP);
    return vec4(light, light, light, 1.0);
  }
}%
